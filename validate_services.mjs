// FASE 3: Script de Valida√ß√£o da Camada de Servi√ßos
// Testa todas as fun√ß√µes CRUD dos servi√ßos sem depender da UI

import supabase from './src/config/supabaseClient.js';
import ndServicePkg from './src/services/ndService.js';
import launchServicePkg from './src/services/launchService.js';

const { ndService } = ndServicePkg;
const { launchService } = launchServicePkg;

// Fun√ß√£o principal de valida√ß√£o
async function validateServices() {
  console.log('üîç INICIANDO VALIDA√á√ÉO DA CAMADA DE SERVI√áOS');
  console.log('=' .repeat(60));
  
  let testNdId = null;
  let testLaunchId = null;
  
  try {
    // 1. Testar cria√ß√£o de ND
    console.log('\n1Ô∏è‚É£ Testando cria√ß√£o de ND...');
    const testNdNumber = `TEST_${Date.now()}`;
    const newND = await ndService.createND(testNdNumber, 'ND de Teste - Valida√ß√£o de Servi√ßos');
    testNdId = newND.id;
    console.log(`‚úÖ ND criada com sucesso (ID: ${testNdId})`);
    
    // 2. Testar busca de ND aberta
    console.log('\n2Ô∏è‚É£ Testando busca de ND aberta...');
    const openND = await ndService.fetchOpenND();
    if (openND && openND.id === testNdId) {
      console.log('‚úÖ ND aberta encontrada corretamente');
    } else {
      console.log('‚ö†Ô∏è ND aberta n√£o corresponde √† criada (pode haver outras NDs abertas)');
    }
    
    // 3. Testar atualiza√ß√£o de adiantamento
    console.log('\n3Ô∏è‚É£ Testando atualiza√ß√£o de adiantamento...');
    const updatedND = await ndService.updateAdiantamento(testNdId, 500.00);
    if (updatedND.valor_adiantamento === 500.00) {
      console.log('‚úÖ Adiantamento atualizado corretamente');
    } else {
      throw new Error('Valor do adiantamento n√£o foi atualizado');
    }
    
    // 4. Testar atualiza√ß√£o de descri√ß√£o
    console.log('\n4Ô∏è‚É£ Testando atualiza√ß√£o de descri√ß√£o...');
    const newDescription = 'ND Atualizada - Teste de Servi√ßos';
    const updatedNDDesc = await ndService.updateDescription(testNdId, newDescription);
    if (updatedNDDesc.descricao === newDescription) {
      console.log('‚úÖ Descri√ß√£o atualizada corretamente');
    } else {
      throw new Error('Descri√ß√£o n√£o foi atualizada');
    }
    
    // 5. Testar busca de dados espec√≠ficos da ND
    console.log('\n5Ô∏è‚É£ Testando busca de dados da ND...');
    const ndData = await ndService.getNDData(testNdId, 'id, numero_nd, descricao, valor_adiantamento');
    if (ndData && ndData.id === testNdId) {
      console.log('‚úÖ Dados da ND recuperados corretamente');
    } else {
      throw new Error('Dados da ND n√£o foram recuperados');
    }
    
    // 6. Testar adi√ß√£o de lan√ßamento
    console.log('\n6Ô∏è‚É£ Testando adi√ß√£o de lan√ßamento...');
    const launchData = {
      ndId: testNdId,
      date: new Date().toISOString().split('T')[0],
      value: 75.50,
      description: 'Lan√ßamento de Teste - Valida√ß√£o',
      category: 'Alimenta√ß√£o',
      estabelecimento: 'Restaurante Teste',
      imageUrl: 'https://via.placeholder.com/150',
      confidence: 95
    };
    
    const newLaunch = await launchService.addLaunch(launchData);
    testLaunchId = newLaunch.id;
    console.log(`‚úÖ Lan√ßamento criado com sucesso (ID: ${testLaunchId})`);
    
    // 7. Testar busca de lan√ßamentos por ND
    console.log('\n7Ô∏è‚É£ Testando busca de lan√ßamentos por ND...');
    const launches = await launchService.getLaunchesByND(testNdId);
    if (launches.length > 0 && launches.some(l => l.id === testLaunchId)) {
      console.log(`‚úÖ Lan√ßamentos recuperados corretamente (${launches.length} encontrados)`);
    } else {
      throw new Error('Lan√ßamentos n√£o foram recuperados corretamente');
    }
    
    // 8. Testar busca de lan√ßamento por ID
    console.log('\n8Ô∏è‚É£ Testando busca de lan√ßamento por ID...');
    const launchById = await launchService.getLaunchById(testLaunchId);
    if (launchById && launchById.id === testLaunchId) {
      console.log('‚úÖ Lan√ßamento recuperado por ID corretamente');
    } else {
      throw new Error('Lan√ßamento n√£o foi recuperado por ID');
    }
    
    // 9. Testar atualiza√ß√£o de lan√ßamento
    console.log('\n9Ô∏è‚É£ Testando atualiza√ß√£o de lan√ßamento...');
    const updateData = {
      valor: 85.75,
      descricao: 'Lan√ßamento Atualizado - Teste'
    };
    const updatedLaunch = await launchService.updateLaunch(testLaunchId, updateData);
    if (updatedLaunch.valor === 85.75) {
      console.log('‚úÖ Lan√ßamento atualizado corretamente');
    } else {
      throw new Error('Lan√ßamento n√£o foi atualizado');
    }
    
    // 10. Testar c√°lculo de total da ND
    console.log('\nüîü Testando c√°lculo de total da ND...');
    const total = await launchService.calculateNDTotal(testNdId);
    if (typeof total === 'number' && total > 0) {
      console.log(`‚úÖ Total calculado corretamente: R$ ${total.toFixed(2)}`);
    } else {
      throw new Error('Total da ND n√£o foi calculado corretamente');
    }
    
    // 11. Testar exclus√£o de lan√ßamento
    console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Testando exclus√£o de lan√ßamento...');
    const deleteResult = await launchService.deleteLaunch(testLaunchId);
    console.log('‚úÖ Lan√ßamento exclu√≠do com sucesso');
    
    // Verificar se foi realmente exclu√≠do
    const launchesAfterDelete = await launchService.getLaunchesByND(testNdId);
    if (!launchesAfterDelete.some(l => l.id === testLaunchId)) {
      console.log('‚úÖ Exclus√£o confirmada - lan√ßamento n√£o encontrado');
    } else {
      throw new Error('Lan√ßamento n√£o foi exclu√≠do corretamente');
    }
    
    // 12. Testar finaliza√ß√£o da ND
    console.log('\n1Ô∏è‚É£2Ô∏è‚É£ Testando finaliza√ß√£o da ND...');
    const finalizedND = await ndService.finalizeND(testNdId, 'ND Finalizada - Teste Completo');
    if (finalizedND.status === 'fechada') {
      console.log('‚úÖ ND finalizada corretamente');
    } else {
      throw new Error('ND n√£o foi finalizada corretamente');
    }
    
    // 13. Limpeza - excluir ND de teste
    console.log('\n1Ô∏è‚É£3Ô∏è‚É£ Limpando dados de teste...');
    await cleanupTestData(testNdId);
    
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ VALIDA√á√ÉO DA CAMADA DE SERVI√áOS BEM-SUCEDIDA');
    console.log('‚úÖ Todas as opera√ß√µes CRUD foram executadas com sucesso');
    console.log('‚úÖ NDService funcionando corretamente');
    console.log('‚úÖ LaunchService funcionando corretamente');
    console.log('‚úÖ Integra√ß√£o com Supabase validada');
    console.log('‚úÖ Sistema pronto para integra√ß√£o com a UI');
    
  } catch (error) {
    console.error('\n' + '=' .repeat(60));
    console.error('‚ùå FALHA NA VALIDA√á√ÉO DA CAMADA DE SERVI√áOS');
    console.error('Erro:', error.message);
    console.error('Stack:', error.stack);
    
    // Tentar limpeza mesmo em caso de erro
    if (testNdId) {
      console.log('\nüßπ Tentando limpeza de dados de teste...');
      try {
        await cleanupTestData(testNdId);
        console.log('‚úÖ Limpeza conclu√≠da');
      } catch (cleanupError) {
        console.warn('‚ö†Ô∏è Erro na limpeza:', cleanupError.message);
      }
    }
    
    process.exit(1);
  }
}

// Fun√ß√£o para limpeza dos dados de teste
async function cleanupTestData(ndId) {
  try {
    // Excluir lan√ßamentos primeiro (devido √† foreign key)
    const { error: launchError } = await supabase
      .from('lancamentos')
      .delete()
      .eq('nd_id', ndId);
    
    if (launchError) {
      console.warn('‚ö†Ô∏è Aviso ao excluir lan√ßamentos:', launchError.message);
    }
    
    // Excluir ND
    const { error: ndError } = await supabase
      .from('nd_viagens')
      .delete()
      .eq('id', ndId);
    
    if (ndError) {
      console.warn('‚ö†Ô∏è Aviso ao excluir ND:', ndError.message);
    } else {
      console.log('‚úÖ Dados de teste removidos');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro na limpeza:', error.message);
  }
}

// Executar valida√ß√£o
if (import.meta.url === `file://${process.argv[1]}`) {
  validateServices();
}

export { validateServices };