// FASE 3: Script de Valida√ß√£o Simplificado da Camada de Servi√ßos
// Usa require() para evitar problemas de m√≥dulos ES

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configurar cliente Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// Fun√ß√£o principal de valida√ß√£o
async function validateServices() {
  console.log('üîç INICIANDO VALIDA√á√ÉO DA CAMADA DE SERVI√áOS');
  console.log('=' .repeat(60));
  
  let testNdId = null;
  let testLaunchId = null;
  
  try {
    // 1. Testar cria√ß√£o de ND
    console.log('\n1Ô∏è‚É£ Testando cria√ß√£o de ND...');
    const testNdNumber = `TEST_${Date.now()}`;
    const { data: newND, error: createError } = await supabase
      .from('nd_viagens')
      .insert({
        numero_nd: testNdNumber,
        descricao: 'ND de Teste - Valida√ß√£o de Servi√ßos',
        status: 'aberta',
        valor_adiantamento: 0.00
      })
      .select()
      .single();
    
    if (createError) throw createError;
    testNdId = newND.id;
    console.log(`‚úÖ ND criada com sucesso (ID: ${testNdId})`);
    
    // 2. Testar busca de ND aberta
    console.log('\n2Ô∏è‚É£ Testando busca de ND aberta...');
    const { data: openND, error: fetchError } = await supabase
      .from('nd_viagens')
      .select('*')
      .eq('status', 'aberta')
      .eq('id', testNdId)
      .single();
    
    if (fetchError && fetchError.code !== 'PGRST116') throw fetchError;
    if (openND) {
      console.log('‚úÖ ND aberta encontrada corretamente');
    }
    
    // 3. Testar atualiza√ß√£o de adiantamento
    console.log('\n3Ô∏è‚É£ Testando atualiza√ß√£o de adiantamento...');
    const { data: updatedND, error: updateError } = await supabase
      .from('nd_viagens')
      .update({ valor_adiantamento: 500.00 })
      .eq('id', testNdId)
      .select()
      .single();
    
    if (updateError) throw updateError;
    if (updatedND.valor_adiantamento === 500.00) {
      console.log('‚úÖ Adiantamento atualizado corretamente');
    } else {
      throw new Error('Valor do adiantamento n√£o foi atualizado');
    }
    
    // 4. Testar adi√ß√£o de lan√ßamento
    console.log('\n4Ô∏è‚É£ Testando adi√ß√£o de lan√ßamento...');
    const { data: newLaunch, error: launchError } = await supabase
      .from('lancamentos')
      .insert({
        nd_id: testNdId,
        data_despesa: new Date().toISOString().split('T')[0],
        valor: 75.50,
        descricao: 'Lan√ßamento de Teste - Valida√ß√£o',
        categoria: 'Alimenta√ß√£o',
        estabelecimento: 'Restaurante Teste',
        imagem_url: 'https://via.placeholder.com/150',
        confianca: 95
      })
      .select()
      .single();
    
    if (launchError) throw launchError;
    testLaunchId = newLaunch.id;
    console.log(`‚úÖ Lan√ßamento criado com sucesso (ID: ${testLaunchId})`);
    
    // 5. Testar busca de lan√ßamentos por ND
    console.log('\n5Ô∏è‚É£ Testando busca de lan√ßamentos por ND...');
    const { data: launches, error: launchesError } = await supabase
      .from('lancamentos')
      .select('*')
      .eq('nd_id', testNdId);
    
    if (launchesError) throw launchesError;
    if (launches.length > 0 && launches.some(l => l.id === testLaunchId)) {
      console.log(`‚úÖ Lan√ßamentos recuperados corretamente (${launches.length} encontrados)`);
    } else {
      throw new Error('Lan√ßamentos n√£o foram recuperados corretamente');
    }
    
    // 6. Testar atualiza√ß√£o de lan√ßamento
    console.log('\n6Ô∏è‚É£ Testando atualiza√ß√£o de lan√ßamento...');
    const { data: updatedLaunch, error: updateLaunchError } = await supabase
      .from('lancamentos')
      .update({
        valor: 85.75,
        descricao: 'Lan√ßamento Atualizado - Teste'
      })
      .eq('id', testLaunchId)
      .select()
      .single();
    
    if (updateLaunchError) throw updateLaunchError;
    if (updatedLaunch.valor === 85.75) {
      console.log('‚úÖ Lan√ßamento atualizado corretamente');
    } else {
      throw new Error('Lan√ßamento n√£o foi atualizado');
    }
    
    // 7. Testar exclus√£o de lan√ßamento
    console.log('\n7Ô∏è‚É£ Testando exclus√£o de lan√ßamento...');
    const { error: deleteError } = await supabase
      .from('lancamentos')
      .delete()
      .eq('id', testLaunchId);
    
    if (deleteError) throw deleteError;
    console.log('‚úÖ Lan√ßamento exclu√≠do com sucesso');
    
    // 8. Testar finaliza√ß√£o da ND
    console.log('\n8Ô∏è‚É£ Testando finaliza√ß√£o da ND...');
    const { data: finalizedND, error: finalizeError } = await supabase
      .from('nd_viagens')
      .update({
        descricao: 'ND Finalizada - Teste Completo',
        status: 'fechada',
        updated_at: new Date().toISOString()
      })
      .eq('id', testNdId)
      .select()
      .single();
    
    if (finalizeError) throw finalizeError;
    if (finalizedND.status === 'fechada') {
      console.log('‚úÖ ND finalizada corretamente');
    } else {
      throw new Error('ND n√£o foi finalizada corretamente');
    }
    
    // 9. Limpeza - excluir ND de teste
    console.log('\n9Ô∏è‚É£ Limpando dados de teste...');
    await cleanupTestData(testNdId);
    
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ VALIDA√á√ÉO DA CAMADA DE SERVI√áOS BEM-SUCEDIDA');
    console.log('‚úÖ Todas as opera√ß√µes CRUD foram executadas com sucesso');
    console.log('‚úÖ Integra√ß√£o com Supabase funcionando corretamente');
    console.log('‚úÖ Estrutura de dados validada');
    console.log('‚úÖ Sistema pronto para integra√ß√£o com a UI');
    
  } catch (error) {
    console.error('\n' + '=' .repeat(60));
    console.error('‚ùå FALHA NA VALIDA√á√ÉO DA CAMADA DE SERVI√áOS');
    console.error('Erro:', error.message);
    console.error('Stack:', error.stack);
    
    // Tentar limpeza mesmo em caso de erro
    if (testNdId) {
      console.log('\nüßπ Tentando limpeza de dados de teste...');
      try {
        await cleanupTestData(testNdId);
        console.log('‚úÖ Limpeza conclu√≠da');
      } catch (cleanupError) {
        console.warn('‚ö†Ô∏è Erro na limpeza:', cleanupError.message);
      }
    }
    
    process.exit(1);
  }
}

// Fun√ß√£o para limpeza dos dados de teste
async function cleanupTestData(ndId) {
  try {
    // Excluir lan√ßamentos primeiro (devido √† foreign key)
    const { error: launchError } = await supabase
      .from('lancamentos')
      .delete()
      .eq('nd_id', ndId);
    
    if (launchError) {
      console.warn('‚ö†Ô∏è Aviso ao excluir lan√ßamentos:', launchError.message);
    }
    
    // Excluir ND
    const { error: ndError } = await supabase
      .from('nd_viagens')
      .delete()
      .eq('id', ndId);
    
    if (ndError) {
      console.warn('‚ö†Ô∏è Aviso ao excluir ND:', ndError.message);
    } else {
      console.log('‚úÖ Dados de teste removidos');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro na limpeza:', error.message);
  }
}

// Executar valida√ß√£o
validateServices();